#!/usr/bin/env python3

"""
Script para debugar vari√°veis no template DOCX
Execute: python debug-variables.py
"""

from docx import Document
import re

def debug_template_variables():
    template_path = "CONTRATO Casa da Ana.docx"
    
    try:
        document = Document(template_path)
        print("üîç DEBUGANDO VARI√ÅVEIS NO TEMPLATE")
        print("=" * 50)
        
        # Lista para armazenar todas as vari√°veis encontradas
        variables_found = set()
        
        print("\nüìÑ ANALISANDO PAR√ÅGRAFOS:")
        print("-" * 30)
        
        for i, paragraph in enumerate(document.paragraphs):
            text = paragraph.text.strip()
            if text and '{{' in text:
                print(f"Par√°grafo {i}: {text}")
                
                # Encontrar todas as vari√°veis {{ }}
                variables = re.findall(r'\{\{[^}]+\}\}', text)
                for var in variables:
                    variables_found.add(var)
                    print(f"  ‚Üí Vari√°vel encontrada: '{var}'")
        
        print("\nüìä ANALISANDO TABELAS:")
        print("-" * 30)
        
        for table_idx, table in enumerate(document.tables):
            print(f"\nTabela {table_idx}:")
            for row_idx, row in enumerate(table.rows):
                for cell_idx, cell in enumerate(row.cells):
                    for para_idx, paragraph in enumerate(cell.paragraphs):
                        text = paragraph.text.strip()
                        if text and '{{' in text:
                            print(f"  Linha {row_idx}, C√©lula {cell_idx}: {text}")
                            
                            variables = re.findall(r'\{\{[^}]+\}\}', text)
                            for var in variables:
                                variables_found.add(var)
                                print(f"    ‚Üí Vari√°vel encontrada: '{var}'")
        
        print("\n‚úÖ RESUMO DAS VARI√ÅVEIS ENCONTRADAS:")
        print("=" * 50)
        
        if variables_found:
            for var in sorted(variables_found):
                print(f"  ‚Ä¢ {var}")
        else:
            print("  ‚ùå Nenhuma vari√°vel {{ }} encontrada!")
        
        print(f"\nüìä Total de vari√°veis √∫nicas: {len(variables_found)}")
        
        # Verificar vari√°veis espec√≠ficas que deveriam estar presentes
        expected_vars = [
            '{{ nome do locat√°rio }}',
            '{{ qtd_noites }}', 
            '{{ dia_inicio }}',
            '{{ dia_fim }}',
            '{{ valor_locacao }}',
            '{{ valor_locacao/2 }}'
        ]
        
        print("\nüîç VERIFICA√á√ÉO DE VARI√ÅVEIS ESPERADAS:")
        print("-" * 40)
        
        for expected in expected_vars:
            if expected in variables_found:
                print(f"  ‚úÖ {expected}")
            else:
                # Procurar varia√ß√µes pr√≥ximas
                similar = [v for v in variables_found if expected.replace('{{ ', '').replace(' }}', '') in v.replace('{{ ', '').replace(' }}', '')]
                if similar:
                    print(f"  ‚ö†Ô∏è  {expected} ‚Üí Encontrada varia√ß√£o: {similar[0]}")
                else:
                    print(f"  ‚ùå {expected} ‚Üí N√ÉO ENCONTRADA")
        
        print("\nüí° DICAS PARA CORRE√á√ÉO:")
        print("-" * 25)
        print("  1. Verifique se as vari√°veis no DOCX t√™m exatamente a mesma grafia")
        print("  2. Cuidado com espa√ßos extras dentro das chaves")
        print("  3. Verifique se n√£o h√° quebras de linha dentro das vari√°veis")
        print("  4. Use as vari√°veis exatas encontradas acima no c√≥digo Python")
        
    except FileNotFoundError:
        print(f"‚ùå Arquivo '{template_path}' n√£o encontrado!")
        print("  Verifique se o template est√° no diret√≥rio atual")
    except Exception as e:
        print(f"‚ùå Erro ao processar template: {e}")

if __name__ == "__main__":
    debug_template_variables() 